openapi: 3.1.0
info: { title: Orders API, version: 1.0.0 }
servers:
  - url: http://localhost:3002

paths:
  /health:
    get:
      responses:
        '200': { description: OK }

  /products:
    post:
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [sku, name, price_cents, stock]
              properties:
                sku: { type: string }
                name: { type: string }
                price_cents: { type: integer }
                stock: { type: integer }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    get:
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: search
          schema: { type: string }
        - in: query
          name: cursor
          schema: { type: integer, minimum: 1 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 10 }
      responses:
        '200': { description: OK }

  /products/{id}:
    get:
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404': { description: Not Found }
    patch:
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                price_cents: { type: integer }
                stock: { type: integer }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404': { description: Not Found }

  /orders:
    post:
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [customer_id, items]
              properties:
                customer_id: { type: integer }
                items:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    required: [product_id, qty]
                    properties:
                      product_id: { type: integer }
                      qty: { type: integer }
      responses:
        '201': { description: Created }
    get:
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: status
          schema: { type: string, enum: [CREATED, CONFIRMED, CANCELED] }
        - in: query
          name: from
          schema: { type: string, format: date-time }
        - in: query
          name: to
          schema: { type: string, format: date-time }
        - in: query
          name: cursor
          schema: { type: integer, minimum: 1 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 10 }
      responses:
        '200': { description: OK }

  /orders/{id}:
    get:
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404': { description: Not Found }

  /orders/{id}/confirm:
    post:
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
        - in: header
          name: X-Idempotency-Key
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }

  /orders/{id}/cancel:
    post:
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: Canceled }
        '409': { description: Conflict }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Product:
      type: object
      properties:
        id: { type: integer }
        sku: { type: string }
        name: { type: string }
        price_cents: { type: integer }
        stock: { type: integer }
        created_at: { type: string, format: date-time }

    OrderItem:
      type: object
      properties:
        product_id: { type: integer }
        qty: { type: integer }
        unit_price_cents: { type: integer }
        subtotal_cents: { type: integer }

    Order:
      type: object
      properties:
        id: { type: integer }
        customer_id: { type: integer }
        status: { type: string, enum: [CREATED, CONFIRMED, CANCELED] }
        total_cents: { type: integer }
        created_at: { type: string, format: date-time }
        items:
          type: array
          items: { $ref: '#/components/schemas/OrderItem' }
